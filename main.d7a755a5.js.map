{"version":3,"sources":["scripts/cell.js","scripts/tile.js","scripts/grid.js","scripts/main.js"],"names":["Cell","gridElement","x","y","grid","cell","document","createElement","classList","add","append","tile","setXY","linkedTile","linkedTileForMerge","newTile","isEmpty","hasTileForMerge","value","mergedValue","setValue","removeFromDOM","unlinkTileForMerge","score","updateTotalScore","Tile","tileElement","Math","random","style","setProperty","textContent","bgLightness","log2","remove","GRID_SIZE","CELLS_COUNT","Grid","cells","totalScore","i","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","emptyCells","filter","length","reduce","groupedCells","forEach","unlinkTile","lastMerge","button","querySelector","gameBoard","getElementById","messageWin","messageLose","messageStart","messageRestart","gameScore","setupInputOnce","window","addEventListener","handleInput","once","event","key","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","getRandomEmptyCell","linkTile","slideTiles","updateGameScore","group","slideTilesInGroup","mergeTiles","j","cellWithTile","targetCell","canAccept","linkTileForMerge","canMove","some","canMoveInGroup","index","restartGame","reset","contains","innerHTML"],"mappings":";AAoDG,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EApDUA,IAAAA,EAAAA,WACCC,SAAAA,EAAAA,EAAaC,EAAGC,EAAGC,GAAM,EAAA,KAAA,GAC7BC,IAAAA,EAAOC,SAASC,cAAc,OAEpCF,EAAKG,UAAUC,IAAI,cACnBR,EAAYS,OAAOL,GACdH,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EACJC,KAAAA,KAAOA,EA4Cb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WAzCQO,MAAAA,SAAAA,GACPA,EAAKC,MAAM,KAAKV,EAAG,KAAKC,GACnBU,KAAAA,WAAaF,IAuCnB,CAAA,IAAA,aApCY,MAAA,WACNE,KAAAA,WAAa,OAmCnB,CAAA,IAAA,UAhCS,MAAA,WACD,OAAC,KAAKA,aA+Bd,CAAA,IAAA,mBA5BgBF,MAAAA,SAAAA,GACfA,EAAKC,MAAM,KAAKV,EAAG,KAAKC,GACnBW,KAAAA,mBAAqBH,IA0B3B,CAAA,IAAA,qBAvBoB,MAAA,WACdG,KAAAA,mBAAqB,OAsB3B,CAAA,IAAA,kBAnBiB,MAAA,WACT,QAAE,KAAKA,qBAkBf,CAAA,IAAA,YAfSC,MAAAA,SAAAA,GACD,OAAA,KAAKC,YAAe,KAAKC,mBAAqB,KAAKJ,WAAWK,QAAUH,EAAQG,QAcxF,CAAA,IAAA,aAXY,MAAA,WACLC,IAAAA,EAAc,KAAKN,WAAWK,MAAQ,KAAKJ,mBAAmBI,MAC/DL,KAAAA,WAAWO,SAASD,GAEpBL,KAAAA,mBAAmBO,gBACnBC,KAAAA,qBAECC,IAAAA,EAAQJ,EAGP,OAFFf,KAAAA,KAAKoB,iBAAiBD,GAEpB,KAAKA,OAASA,MACtB,EApDUvB,GAoDV,QAAA,KAAA;;AC1BA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EA1BUyB,IAAAA,EAAAA,WACCxB,SAAAA,EAAAA,GAAa,EAAA,KAAA,GAClByB,KAAAA,YAAcpB,SAASC,cAAc,OACrCmB,KAAAA,YAAYlB,UAAUC,IAAI,cAC1BW,KAAAA,SAASO,KAAKC,SAAW,GAAM,EAAI,GACxC3B,EAAYS,OAAO,KAAKgB,aAqBzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAlBKxB,MAAAA,SAAAA,EAAGC,GACFD,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,EAEJuB,KAAAA,YAAYG,MAAMC,YAAY,MAAO5B,GACrCwB,KAAAA,YAAYG,MAAMC,YAAY,MAAO3B,KAa3C,CAAA,IAAA,WAVQe,MAAAA,SAAAA,GACFA,KAAAA,MAAQA,EACRQ,KAAAA,YAAYK,YAAcb,EACzBc,IAAAA,EAAc,IAAyB,EAAnBL,KAAKM,KAAKf,GAC/BQ,KAAAA,YAAYG,MAAMC,YAAY,iBAAqBE,GAAAA,OAAAA,EAAxD,MACKN,KAAAA,YAAYG,MAAMC,YAAY,mBAAuBE,GAAAA,OAAAA,EAAc,GAAK,IAAM,GAAnF,QAKD,CAAA,IAAA,gBAFe,MAAA,WACTN,KAAAA,YAAYQ,aAClB,EA1BUT,GA0BV,QAAA,KAAA;;ACgCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EA1DH,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,aAyDG,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAvDH,IAAMU,EAAY,EACZC,EAAcD,EAAYA,EAEnBE,EAAAA,WACCpC,SAAAA,EAAAA,GAAa,EAAA,KAAA,GAClBqC,KAAAA,MAAQ,GACRC,KAAAA,WAAa,EAEb,IAAA,IAAIC,EAAI,EAAGA,EAAIJ,EAAaI,IAC1BF,KAAAA,MAAMG,KACT,IAAIzC,EAAJ,KAASC,EAAauC,EAAIL,EAAWR,KAAKe,MAAMF,EAAIL,GAAY,OAI/DQ,KAAAA,qBAAuB,KAAKC,qBAC5BC,KAAAA,6BAA+B,KAAKF,qBAAqBG,IAAI,SAAAC,GAAU,OAAA,EAAIA,GAAQC,YAEnFC,KAAAA,kBAAoB,KAAKC,kBACzBC,KAAAA,0BAA4B,KAAKF,kBAAkBH,IAAI,SAAAM,GAAO,OAAA,EAAIA,GAAKJ,YAqC7E,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,qBAlCoB,MAAA,WACbK,IAAAA,EAAa,KAAKf,MAAMgB,OAAO,SAAAjD,GAAQA,OAAAA,EAAKW,YAE3CqC,OAAAA,EADa1B,KAAKe,MAAMf,KAAKC,SAAWyB,EAAWE,WAgC3D,CAAA,IAAA,qBA5BoB,MAAA,WACZ,OAAA,KAAKjB,MAAMkB,OAAO,SAACC,EAAcpD,GAG/BoD,OAFPA,EAAapD,EAAKH,GAAKuD,EAAapD,EAAKH,IAAM,GAC/CuD,EAAapD,EAAKH,GAAGG,EAAKF,GAAKE,EACxBoD,GACN,MAuBJ,CAAA,IAAA,kBApBiB,MAAA,WACT,OAAA,KAAKnB,MAAMkB,OAAO,SAACC,EAAcpD,GAG/BoD,OAFPA,EAAapD,EAAKF,GAAKsD,EAAapD,EAAKF,IAAM,GAC/CsD,EAAapD,EAAKF,GAAGE,EAAKH,GAAKG,EACxBoD,GACN,MAeJ,CAAA,IAAA,QAZO,MAAA,WACDnB,KAAAA,MAAMoB,QAAQ,SAAArD,GACZA,EAAKW,YACRX,EAAKQ,WAAWQ,gBAChBhB,EAAKsD,kBAQV,CAAA,IAAA,mBAHgBpC,MAAAA,SAAAA,GACVqC,KAAAA,UAAYrC,EACZgB,KAAAA,YAAchB,MACpB,EApDUc,GAoDV,QAAA,KAAA;;ACkJF,aA5MD,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,aAEMwB,EAASvD,SAASwD,cAAc,WAChCC,EAAYzD,SAAS0D,eAAe,cACpC5D,EAAO,IAAIiC,EAAJ,KAAS0B,GAEhBE,EAAa3D,SAASwD,cAAc,gBACpCI,EAAc5D,SAASwD,cAAc,iBACrCK,EAAe7D,SAASwD,cAAc,kBACtCM,EAAiB9D,SAASwD,cAAc,oBAExCO,EAAY/D,SAASwD,cAAc,eAkBzC,SAASQ,IACPC,OAAOC,iBAAiB,UAAWC,EAAa,CAACC,MAAM,IAGzD,SAASD,EAAYE,GACXA,OAAAA,EAAMC,KACP,IAAA,UACA,IAACC,IAEF,YADAP,IAGFQ,IACA,MAEG,IAAA,YACA,IAACC,IAEF,YADAT,IAGFU,IACA,MAEG,IAAA,YACA,IAACC,IAEF,YADAX,IAGFY,IACA,MAEG,IAAA,aACA,IAACC,IAEF,YADAb,IAGFc,IACA,MAEF,QAEE,YADAd,IAIEvD,IAAAA,EAAU,IAAIU,EAAJ,KAASsC,GACzB3D,EAAKiF,qBAAqBC,SAASvE,GAE9B8D,KAAgBE,KAAkBE,KAAkBE,MACvDjB,EAAY1D,UAAU0B,OAAO,UAC7BiC,EAAa3D,UAAUC,IAAI,UAC3B2D,EAAe5D,UAAUC,IAAI,WAG/B6D,IAGF,SAASQ,IACPS,EAAWnF,EAAKuC,sBAChB6C,IAGF,SAASR,IACPO,EAAWnF,EAAKyC,8BAChB2C,IAGF,SAASN,IACPK,EAAWnF,EAAK6C,mBAChBuC,IAGF,SAASJ,IACPG,EAAWnF,EAAK+C,2BAChBqC,IAGF,SAASD,EAAW9B,GAClBA,EAAaC,QAAQ,SAAA+B,GAASC,OAAAA,EAAkBD,KAEhDrF,EAAKkC,MAAMoB,QAAQ,SAAArD,GACjBA,EAAKY,mBAAqBZ,EAAKsF,eAGjCrB,IAGF,SAASoB,EAAkBD,GACpB,IAAA,IAAIjD,EAAI,EAAGA,EAAIiD,EAAMlC,OAAQf,IAC5BiD,IAAAA,EAAMjD,GAAGxB,UAATyE,CAQEG,IAJAC,IAAAA,EAAeJ,EAAMjD,GAEvBsD,OAAJ,EACIF,EAAIpD,EAAI,EACNoD,GAAK,GAAKH,EAAMG,GAAGG,UAAUF,EAAahF,aAC9CiF,EAAaL,EAAMG,GACnBA,IAGGE,IAIDA,EAAW9E,UACb8E,EAAWR,SAASO,EAAahF,YAEjCiF,EAAWE,iBAAiBH,EAAahF,YAG3CgF,EAAalC,eAIjB,SAASkB,IACAoB,OAAAA,EAAQ7F,EAAKuC,sBAGtB,SAASoC,IACAkB,OAAAA,EAAQ7F,EAAKyC,8BAGtB,SAASoC,IACAgB,OAAAA,EAAQ7F,EAAK6C,mBAGtB,SAASkC,IACAc,OAAAA,EAAQ7F,EAAK+C,2BAGtB,SAAS8C,EAAQxC,GACRA,OAAAA,EAAayC,KAAK,SAAAT,GAASU,OAAAA,EAAeV,KAGnD,SAASU,EAAeV,GACfA,OAAAA,EAAMS,KAAK,SAAC7F,EAAM+F,GACnBA,OAAU,IAAVA,KAIA/F,EAAKW,WAIUyE,EAAMW,EAAQ,GACfL,UAAU1F,EAAKQ,eAIrC,SAAS2E,IACPnB,EAAUtC,YAAc3B,EAAKmC,WAEN,OAAnBnC,EAAKwD,YACPQ,EAAe5D,UAAUC,IAAI,UAC7BwD,EAAWzD,UAAU0B,OAAO,WAIhC,SAASmE,IACPjG,EAAKkG,QACLlG,EAAKmC,WAAa,EAClB8B,EAAUtC,YAAc3B,EAAKmC,WAE7BnC,EAAKiF,qBAAqBC,SAAS,IAAI7D,EAAJ,KAASsC,IAC5C3D,EAAKiF,qBAAqBC,SAAS,IAAI7D,EAAJ,KAASsC,IAE5CK,EAAe5D,UAAU0B,OAAO,UAChCgC,EAAY1D,UAAUC,IAAI,UAErBwD,EAAWzD,UAAU+F,SAAS,WACjCtC,EAAWzD,UAAUC,IAAK,UAG5B6D,IA7LFT,EAAOW,iBAAiB,QAAS,WAC3BX,EAAOrD,UAAU+F,SAAS,WAE5BF,KAEAxC,EAAOrD,UAAU0B,OAAO,SACxB2B,EAAOrD,UAAUC,IAAI,WACrBoD,EAAO2C,UAAY,UAEnBH,IAEAjC,EAAe5D,UAAU0B,OAAO,UAChCiC,EAAa3D,UAAUC,IAAI","file":"main.d7a755a5.js","sourceRoot":"../src","sourcesContent":["export class Cell {\n  constructor(gridElement, x, y, grid) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field-cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n    this.grid = grid;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty() || (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n  }\n\n  mergeTiles() {\n    const mergedValue = this.linkedTile.value + this.linkedTileForMerge.value;\n    this.linkedTile.setValue(mergedValue);\n\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n\n    const score = mergedValue;\n    this.grid.updateTotalScore(score);\n\n    return this.score += score;\n  }\n}\n","export class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('field-tile');\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = value;\n    const bgLightness = 100 - Math.log2(value) * 8;\n    this.tileElement.style.setProperty('--bg-lightness', `${bgLightness}%`);\n    this.tileElement.style.setProperty('--text-lightness', `${bgLightness < 60 ? 100 : 30}%`)\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n}\n","import { Cell } from './cell.js';\nimport { Tile } from './tile.js';\n\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nexport class Grid {\n  constructor(gridElement) {\n    this.cells = [];\n    this.totalScore = 0;\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE), this)\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(column => [...column].reverse());\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(row => [...row].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n      return groupedCells;\n    }, [])\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n      return groupedCells;\n    }, [])\n  }\n\n  reset() {\n    this.cells.forEach(cell => {\n      if (!cell.isEmpty()) {\n        cell.linkedTile.removeFromDOM();\n        cell.unlinkTile();\n      }\n    });\n  }\n\n  updateTotalScore(score) {\n    this.lastMerge = score;\n    this.totalScore += score;\n  }\n}\n","import { Grid } from './grid.js';\nimport { Tile } from './tile.js';\n\nconst button = document.querySelector('.button');\nconst gameBoard = document.getElementById('game-board');\nconst grid = new Grid(gameBoard);\n\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\nconst messageRestart = document.querySelector('.message-restart');\n\nconst gameScore = document.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('restart')) {\n\n    restartGame();\n  } else {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerHTML = 'Restart';\n\n    restartGame();\n\n    messageRestart.classList.remove('hidden');\n    messageStart.classList.add('hidden');\n  }\n});\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, {once: true});\n}\n\nfunction handleInput(event) {\n  switch (event.key) {\n    case 'ArrowUp':\n      if(!canMoveUp()) {\n        setupInputOnce();\n        return;\n      }\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      if(!canMoveDown()) {\n        setupInputOnce();\n        return;\n      }\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if(!canMoveLeft()) {\n        setupInputOnce();\n        return;\n      }\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if(!canMoveRight()) {\n        setupInputOnce();\n        return;\n      }\n      moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    messageLose.classList.remove('hidden');\n    messageStart.classList.add('hidden');\n    messageRestart.classList.add('hidden');\n  }\n\n  setupInputOnce();\n}\n\nfunction moveUp() {\n  slideTiles(grid.cellsGroupedByColumn);\n  updateGameScore();\n}\n\nfunction moveDown() {\n  slideTiles(grid.cellsGroupedByReversedColumn);\n  updateGameScore();\n}\n\nfunction moveLeft() {\n  slideTiles(grid.cellsGroupedByRow);\n  updateGameScore();\n}\n\nfunction moveRight() {\n  slideTiles(grid.cellsGroupedByReversedRow);\n  updateGameScore();\n}\n\nfunction slideTiles(groupedCells) {\n  groupedCells.forEach(group => slideTilesInGroup(group));\n\n  grid.cells.forEach(cell => {\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n\n  setupInputOnce();\n}\n\nfunction slideTilesInGroup(group) {\n  for (let i = 0; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n\n    let targetCell;\n    let j = i - 1;\n    while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0)  {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n    return targetCell.canAccept(cell.linkedTile);\n  })\n}\n\nfunction updateGameScore() {\n  gameScore.textContent = grid.totalScore;\n\n  if (grid.lastMerge === 2048) {\n    messageRestart.classList.add('hidden');\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction restartGame() {\n  grid.reset();\n  grid.totalScore = 0;\n  gameScore.textContent = grid.totalScore;\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n\n  messageRestart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add ('hidden');\n  };\n\n  setupInputOnce();\n}\n"]}